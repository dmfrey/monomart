plugins {
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
}

group = 'mart.mono'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.flywaydb:flyway-core'
//    implementation project(path: 'inventory')

    runtimeOnly 'com.h2database:h2:2.2.224'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

tasks.register('installFrontend', Exec) {
    dependsOn cleanFrontend
    inputs.file("frontend/yarn.lock")
    inputs.file("frontend/package.json")
    outputs.dir("frontend/node_modules")

    workingDir "frontend"
    executable "yarn"
    args "install", "--update-checksums"
}

tasks.register('buildFrontend', Exec) {
    dependsOn installFrontend
    inputs.files(file("frontend").listFiles((file -> file.name != "out") as FileFilter))
    outputs.dir("frontend/build")

    workingDir "frontend"
    executable "yarn"
    args "build"
}

tasks.register('copyFrontend', Copy) {
    from buildFrontend.outputs
    into "$buildDir/resources/main/static"
    doLast {
        println "copied frontend artifacts to $buildDir/resources/main/static"
    }
}

tasks.register('cleanFrontend', Delete) {
    delete "frontend/out", "frontend/.next", "$buildDir/resources/main/static"
    doLast {
        println "deleted frontend artifacts"
    }
}

// region configure Spring's build dependency chain
jar {
    dependsOn copyFrontend
}

// endregion
bootJar {
    dependsOn copyFrontend
}

build {
    dependsOn copyFrontend
}

bootRun {
    dependsOn copyFrontend
}

clean {
    dependsOn cleanFrontend
}
